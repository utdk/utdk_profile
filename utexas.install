<?php

/**
 * @file
 * Install and uninstall functions for the UTexas profile.
 */

use Drupal\user\RoleInterface;
use Drupal\user\UserInterface;
use Symfony\Component\Yaml\Yaml;
use Drupal\block\Entity\Block;

/**
 * Implements hook_preprocess_install_page().
 */
function utexas_preprocess_install_page(&$variables) {
  // UTexas has custom styling for the install page.
  $variables['#attached']['library'][] = 'utexas/utexas-install';
}

/**
 * Implements hook_install().
 *
 * Perform actions to set up the site for UTexas Profile.
 *
 * @see system_install()
 */
function utexas_install() {
  // Set front page to "node".
  \Drupal::configFactory()
    ->getEditable('system.site')
    ->set('page.front', '/node')
    ->save(TRUE);
  // Restrict user registration to admin role creation.
  \Drupal::configFactory()
    ->getEditable('user.settings')
    ->set('register', UserInterface::REGISTER_ADMINISTRATORS_ONLY)
    ->save(TRUE);
  // Set the admin and default theme.
  \Drupal::configFactory()
    ->getEditable('system.theme')
    ->set('admin', 'claro')
    ->set('default', 'forty_acres')
    ->save(TRUE);
  \Drupal::configFactory()
    ->getEditable('node.settings')
    ->set('use_admin_theme', TRUE)
    ->save(TRUE);
  // Set language to EN by default.
  // This is not strictly necessary, since the default
  // is EN.
  \Drupal::configFactory()
    ->getEditable('system.site')
    ->set('langcode', 'en')
    ->save(TRUE);
  \Drupal::configFactory()
    ->getEditable('system.site')
    ->set('default_langcode', 'en')
    ->save(TRUE);
  // Add permissions to anonymous role.
  $anon_perms = [
    'access content',
    'search Google CSE',
    'search content',
    'use text format restricted_html',
    'view media',
  ];
  user_role_grant_permissions(RoleInterface::ANONYMOUS_ID, $anon_perms);
  // Add permissions to authenticated role.
  $auth_perms = [
    'access content',
    'search Google CSE',
    'search content',
    'view media',
  ];
  user_role_grant_permissions(RoleInterface::AUTHENTICATED_ID, $auth_perms);
  // Add configuration for the Metatag Twitter module to set default
  // page title and URL meta.
  $tags = [
    'title' => '[current-page:title] | [site:name]',
    'canonical_url' => '[current-page:url]',
    'twitter_cards_page_url' => '[current-page:url] ',
    'twitter_cards_title' => '[current-page:title] | [site:name]',
  ];
  \Drupal::configFactory()
    ->getEditable('metatag.metatag_defaults.global')
    ->set('tags', $tags)
    ->save(TRUE);
}

/**
 * Add Twitter metatag defaults.
 */
function utexas_update_8101() {
  if (\Drupal::moduleHandler()->moduleExists('metatag_twitter_cards') === FALSE) {
    \Drupal::service('module_installer')->install(['metatag_twitter_cards']);
  }
  $new_metatag_defaults = [
    'title' => '[current-page:title] | [site:name]',
    'canonical_url' => '[current-page:url]',
    'twitter_cards_page_url' => '[current-page:url] ',
    'twitter_cards_title' => '[current-page:title] | [site:name]',
  ];
  $expected_metatag_defaults = [
    'title' => '[current-page:title] | [site:name]',
    'canonical_url' => '[current-page:url]',
  ];
  $metatag_config = \Drupal::configFactory()->getEditable('metatag.metatag_defaults.global');
  $actual_metatag_values = $metatag_config->get('tags');
  if ($actual_metatag_values == $expected_metatag_defaults) {
    $metatag_config->set('tags', $new_metatag_defaults);
    $metatag_config->save(TRUE);
  }
}

/**
 * Fix display of admin menu items to match permissions.
 */
function utexas_update_8102() {
  if (\Drupal::moduleHandler()->moduleExists('admin_toolbar_links_access_filter') === FALSE) {
    \Drupal::service('module_installer')->install(['admin_toolbar_links_access_filter']);
  }
}

/**
 * Disable Big Pipe on sites installed prior to 3.0.0-beta.6.
 */
function utexas_update_8103() {
  if (\Drupal::moduleHandler()->moduleExists('big_pipe') === TRUE) {
    \Drupal::service('module_installer')->uninstall(['big_pipe']);
  }
}

/**
 * Add Google CSE permission to Authenticated role.
 */
function utexas_update_8104() {
  user_role_grant_permissions(RoleInterface::AUTHENTICATED_ID, ['search Google CSE']);
}

/**
 * Enable Twitter Profile Widget on existing sites.
 */
function utexas_update_8105() {
  if (\Drupal::moduleHandler()->moduleExists('twitter_profile_widget') === FALSE) {
    \Drupal::service('module_installer')->install(['twitter_profile_widget']);
  }
}

/**
 * Enable AddToAny on existing sites.
 */
function utexas_update_8106() {
  $module = 'addtoany';
  if (\Drupal::moduleHandler()->moduleExists($module) === FALSE) {
    \Drupal::service('module_installer')->install([$module]);
  }
}

/**
 * Configure AddToAny settings.
 */
function utexas_update_8107() {
  // Set existing sites' AddToAny configuration to the default state.
  $config_name = 'addtoany.settings';
  $config = \Drupal::configFactory()->getEditable($config_name);
  $config_path = drupal_get_path('profile', 'utexas') . '/config/install/' . $config_name . '.yml';
  if (!empty($config_path)) {
    $data = Yaml::parse(file_get_contents($config_path));
    if (is_array($data)) {
      $config->setData($data)->save(TRUE);
    }
  }
}

/**
 * Enable XMLSitemap on existing sites.
 */
function utexas_update_8108() {
  $module = 'xmlsitemap';
  if (\Drupal::moduleHandler()->moduleExists($module) === FALSE) {
    \Drupal::service('module_installer')->install([$module]);
  }
}

/**
 * Configure XMLSitemap settings.
 */
function utexas_update_8109() {
  // Set existing sites XMLSitemap configuration to the default state.
  $config_names = [
    'xmlsitemap.settings.node.utexas_flex_page',
    'xmlsitemap.settings.node.page',
    'xmlsitemap.settings.node.article',
  ];
  foreach ($config_names as $config_name) {
    if (\Drupal::config($config_name)->get('status') === NULL) {
      $config = \Drupal::configFactory()->getEditable($config_name);
      $config_path = drupal_get_path('profile', 'utexas') . '/config/install/' . $config_name . '.yml';
      if (!empty($config_path)) {
        $data = Yaml::parse(file_get_contents($config_path));
        if (is_array($data)) {
          $config->setData($data)->save(TRUE);
        }
      }
    }
    else {
      $message = dt('XML Sitemap configuration object "@ct" found. No action taken.', ['@ct' => $config_name]);
      \Drupal::messenger()->addMessage($message);
      \Drupal::logger('utexas')->notice($message);
    }
  }
}

/**
 * Uninstall editor_advanced_link contrib module from existing sites #1085.
 */
function utexas_update_8110() {
  if (\Drupal::moduleHandler()->moduleExists('editor_advanced_link') === TRUE) {
    \Drupal::service('module_installer')->uninstall(['editor_advanced_link']);
  }
}

/**
 * Install Claro theme and set it as admin theme.
 */
function utexas_update_8111() {
  \Drupal::service('theme_installer')->install(['claro']);
  \Drupal::configFactory()
    ->getEditable('system.theme')
    ->set('admin', 'claro')
    ->save(TRUE);
}

/**
 * Uninstall adminal_theme, seven, bartik, and adminimal_admin_toolbar: #1457.
 */
function utexas_update_8112() {
  if (\Drupal::moduleHandler()->moduleExists('adminimal_admin_toolbar')) {
    \Drupal::service('module_installer')->uninstall(['adminimal_admin_toolbar']);
  }
  if (\Drupal::service('theme_handler')->themeExists('adminimal_theme')) {
    \Drupal::service('theme_installer')->uninstall(['adminimal_theme']);
  }
  if (\Drupal::service('theme_handler')->themeExists('seven')) {
    \Drupal::service('theme_installer')->uninstall(['seven']);
  }
}

/**
 * Set page caching to 15 minutes #1464.
 */
function utexas_update_8113() {
  // Set base value for max-age in Cache-Control header for reverse proxies.
  $config = \Drupal::service('config.factory')->getEditable('system.performance');
  // Only update max-age if is set to no caching.
  if ($config->get('cache.page.max_age') === 0) {
    $config->set('cache.page.max_age', 900);
  }
  $config->save();
}

/**
 * Issue #1026: Restrict Content Editor access to the global Block Layout UI.
 *
 * Install module.
 */
function utexas_update_8114() {
  // Get static services.
  $messenger = Drupal::messenger();
  $module_handler = Drupal::moduleHandler();
  /** @var Drupal\Core\Extension\ModuleInstallerInterface $module_installer */
  $module_installer = Drupal::service('module_installer');

  // Install utexas_block_library_access module.
  $module_machine_name = 'utexas_block_library_access';
  if (!$module_handler->moduleExists($module_machine_name)) {
    $module_installer->install([$module_machine_name]);
    $module_readable_name = $module_handler->getName($module_machine_name);
    $messenger->addMessage(t('%module_name has been installed.', ['%module_name' => $module_readable_name]));
  }
}

/**
 * Issue #1026: Restrict Content Editor access to the global Block Layout UI.
 *
 * Manipulate roles.
 */
function utexas_update_8115() {
  // Get static services.
  $entity_type_manager = Drupal::entityTypeManager();
  $messenger = Drupal::messenger();
  /** @var Drupal\user\PermissionHandler $permission_handler */
  $permission_handler = Drupal::service('user.permissions');

  $target_role = 'utexas_content_editor';
  /** @var Drupal\user\Entity\Role $role */
  $role = $entity_type_manager->getStorage('user_role')->load($target_role);

  // If target role does not exist, bail.
  if (is_null($role)) {
    return;
  }

  // Add new permission to target role.
  $available_permissions = $permission_handler->getPermissions();
  $new_permission = 'create and edit reusable blocks';
  if (in_array($new_permission, array_keys($available_permissions))) {
    $role->grantPermission($new_permission);
    $role->save();
    $messenger->addMessage(t('The %permission permission has been granted to the %role role.', ['%role' => $role->label(), '%permission' => $new_permission]));
  }

  // Remove old permission from target role.
  $old_permission = 'administer blocks';
  if ($role->hasPermission($old_permission)) {
    $role->revokePermission($old_permission);
    $role->save();
    $messenger->addMessage(t('The %permission permission has been revoked from the %role role.', ['%role' => $role->label(), '%permission' => $old_permission]));
  }
}

/**
 * Enable Security Kit on existing sites.
 */
function utexas_update_8116() {
  $module = 'seckit';
  if (\Drupal::moduleHandler()->moduleExists($module) === FALSE) {
    \Drupal::service('module_installer')->install([$module]);
  }
}

/**
 * Enable URL embed on existing sites.
 */
function utexas_update_8117() {
  $module = 'url_embed';
  if (\Drupal::moduleHandler()->moduleExists($module) === FALSE) {
    \Drupal::service('module_installer')->install([$module]);
  }
}

/**
 * Add Flex list on existing sites.
 */
function utexas_update_8118() {
  $module = 'utexas_flex_list';
  if (\Drupal::moduleHandler()->moduleExists($module) === FALSE) {
    \Drupal::service('module_installer')->install([$module]);
  }
}

/**
 * Add core modules Workflows and Content Moderation on existing sites. (fixes #931)
 */
function utexas_update_8119() {
  $modules = [
    'content_moderation',
    'workflows',
  ];
  \Drupal::service('module_installer')->install($modules);
}

/**
 * Enable Updated on existing sites.
 */
function utexas_update_8120() {
  $module = 'updated';
  if (\Drupal::moduleHandler()->moduleExists($module) === FALSE) {
    \Drupal::service('module_installer')->install([$module]);
  }
}

/**
 * Relocate instance of Updated block on main content region.
 */
function utexas_update_8121() {
  $moduleHandler = \Drupal::service('module_handler');
  if (!$moduleHandler->moduleExists('updated')) {
    return;
  }
  $weight = 0;
  if ($block = Block::load('lastupdateddateblock')) {
    // Place this block directly above main page content.
    if ($page_title = Block::load('main_page_content')) {
      $weight = $page_title->getWeight();
      $weight = $weight - 1;
    }
    $block->setWeight($weight);
    $block->save();
  }
}

/**
 * Add filters & capabilities in Flex HTML to Full HTML
 */
function utexas_update_8122() {
  // Set existing sites' AddToAny configuration to the default state.
  $config_names = [
    'filter.format.full_html',
    'editor.editor.full_html',
  ];
  foreach ($config_names as $config_name) {
    $config = \Drupal::configFactory()->getEditable($config_name);
    $config_path = drupal_get_path('profile', 'utexas') . '/config/install/' .  $config_name . '.yml';
    if (!empty($config_path)) {
      $data = Yaml::parse(file_get_contents($config_path));
      if (is_array($data)) {
        $config->setData($data)->save(TRUE);
      }
    }
  }
}
