<?php

/**
 * @file
 * Defines utexas_link_element field type.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\menu_link_content\MenuLinkContentInterface;
use Drupal\utexas_form_elements\DocumentationLinks;
use Drupal\utexas_form_elements\RenderElementHelper;
use Drupal\utexas_form_elements\UtexasLinkOptionsHelper;

/**
 * Implements hook_theme().
 */
function utexas_form_elements_theme($existing, $type, $theme, $path) {
  $variables = [
    'utexas_link_options_element' => [
      'render element' => 'element',
      'template' => 'utexas-link-options-element',
    ],
    'utexas_link_options_element_multiple' => [
      'render element' => 'element',
      'template' => 'utexas-link-options-element-multiple',
    ],
  ];
  return $variables;
}

/**
 * Implements hook_element_info_alter().
 */
function utexas_form_elements_element_info_alter(array &$info) {
  \Drupal::classResolver(RenderElementHelper::class)->alterElementInfo($info);
}

/**
 * Implements hook_field_widget_info_alter().
 */
function utexas_form_elements_field_widget_info_alter(array &$definitions) {
  // Alter "Drupal\Core\Field\Plugin\Field\FieldWidget\OptionsButtonsWidget".
  $definitions['options_buttons']['class'] = 'Drupal\utexas_form_elements\Plugin\Field\FieldWidget\OptionsButtonsWidget';
  // Alter "Drupal\Core\Field\Plugin\Field\FieldWidget\OptionsSelectWidget".
  $definitions['options_select']['class'] = 'Drupal\utexas_form_elements\Plugin\Field\FieldWidget\OptionsSelectWidget';
  // Alter "Drupal\Core\Field\Plugin\Field\FieldWidget\EntityReferenceAutocompleteWidget".
  $definitions['entity_reference_autocomplete']['class'] = 'Drupal\utexas_form_elements\Plugin\Field\FieldWidget\EntityReferenceAutocompleteWidget';
  // Alter "Drupal\Core\Field\Plugin\Field\FieldWidget\EntityReferenceAutocompleteTagsWidget".
  $definitions['entity_reference_autocomplete_tags']['class'] = 'Drupal\utexas_form_elements\Plugin\Field\FieldWidget\EntityReferenceAutocompleteTagsWidget';
}

/**
 * Implements hook_ckeditor_css_alter().
 */
function utexas_form_elements_ckeditor_css_alter(array &$css, $editor) {
  $module_handler = \Drupal::service('module_handler');
  $module_path = $module_handler->getModule('utexas_form_elements')->getPath();
  $css[] = $module_path . '/css/ckeditor.css';
}

/**
 * Implements hook_form_alter().
 */
function utexas_form_elements_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Add documentation to block instances accessed via the Block UI.
  foreach (DocumentationLinks::$docLinks as $block_type => $link) {
    if ($form_id !== 'block_content_' . $block_type . '_form') {
      continue;
    }
    $form['description'] = [
      '#markup' => '<a target="_blank" href="' . $link . '">View documentation for this component<span class="ut-cta-link--external"></span></a>',
      '#weight' => -999,
    ];
    $form['#attached']['library'][] = 'utexas_form_elements/link-options';
  }
}

/**
 * Implements hook_form_layout_builder_configure_block_alter().
 */
function utexas_form_elements_form_layout_builder_configure_block_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Add documentation to block instances accessed via Layout Builder.
  if (!isset($form['settings']['block_form'])) {
    return;
  }
  $bundle = $form['settings']['block_form']['#block']->bundle();
  foreach (DocumentationLinks::$docLinks as $block_type => $link) {
    if ($bundle !== $block_type) {
      continue;
    }
    $label = $form['settings']['admin_label']['#plain_text'];
    unset($form['settings']['admin_label']['#plain_text']);
    $form['settings']['admin_label']['#description'] = [
      '#markup' => $label . ' (<a target="_blank" href="' . $link . '">View documentation for this component<span class="ut-cta-link--external"></span></a>)',
      '#weight' => -999,
    ];
    $form['#attached']['library'][] = 'utexas_form_elements/link-options';
  }
}

/**
 * Implements hook_form_node_form_alter().
 */
function utexas_form_elements_form_node_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $form['actions']['delete']['#title'] = t('Delete permanently');
  // Add an "Archive" submit handler if the node uses the "Standard Workflow"
  // and the current user has the workflow transition permission.
  /** @var \Drupal\content_moderation\ModerationInformationInterface $moderation_info */
  $moderation_info = Drupal::service('content_moderation.moderation_information');
  /** @var \Drupal\node\Entity\Node $node */
  $node = $form_state->getFormObject()->getEntity();
  $op = $form_state->getFormObject()->getOperation();
  if ($op !== 'edit') {
    return;
  }
  if (!$moderation_info->isModeratedEntity($node)) {
    return;
  }
  if ($moderation_info->getWorkflowForEntity($node)->id() !== 'standard_workflow') {
    return;
  }
  if (!\Drupal::currentUser()->hasPermission('use standard_workflow transition archive')) {
    return;
  }
  $delete_weight = $form['actions']['delete']['#weight'];
  $submit_actions = $form['actions']['submit']['#submit'];
  $archive_submit = ['_utexas_form_elements_archive_submit'];
  foreach (array_values($submit_actions) as $action) {
    $archive_submit[] = $action;
  }
  $form['actions']['archive'] = [
    '#type' => 'submit',
    '#value' => t('Archive'),
    '#submit' => $archive_submit,
    '#weight' => $delete_weight - 1,
    '#attributes' => [
      'class' => ['button', 'button--danger'],
    ],
  ];
}

/**
 * Submit callback to set a node using "Standard workflow" to "archived".
 */
function _utexas_form_elements_archive_submit(&$form, FormStateInterface $form_state) {
  $form_state->setValue(['moderation_state', '0', 'value'], 'archived');
  $messenger = \Drupal::service("messenger");
  $messenger->addMessage(t('This page has been archived. It will not be visible to anonymous visitors. It can be made visible again by setting its state to "Published".'));
}

/**
 * Implements hook_contextual_links_alter().
 */
function utexas_form_elements_local_tasks_alter(&$local_tasks) {
  // Do not display the 'Delete' tab on node forms (nodes can still be deleted)
  // from within the 'Edit' interface.
  unset($local_tasks['entity.node.delete_form']);
}

/**
 * Implements hook_library_info_alter().
 */
function utexas_form_elements_library_info_alter(&$libraries, $extension) {
  if ($extension === 'ckeditor5') {
    $theme = \Drupal::configFactory()->getEditable('system.theme')->get('default');
    $themeinfo = \Drupal::service('extension.list.theme')->getExtensionInfo($theme);
    $basetheme = $themeinfo['base theme'] ?? '';
    $eligible_themes = ['forty_acres', 'speedway'];
    $is_eligible_theme = in_array($theme, $eligible_themes) || in_array($basetheme, $eligible_themes);
    // Add paths to stylesheets specified by a modules's ckeditor5-stylesheets
    // config property.
    $module = 'utexas_form_elements';
    $module_path = \Drupal::service('extension.list.module')->getPath($module);
    $info = \Drupal::service('extension.list.module')->getExtensionInfo($module);
    if (isset($info['ckeditor5-stylesheets']) && $info['ckeditor5-stylesheets'] !== FALSE) {
      $css = $info['ckeditor5-stylesheets'];
      foreach (array_values($css) as $url) {
        $path = '/' . $module_path . '/' . $url;
        // Only load utexas_form_elements ckeditor5-stylesheets if the active
        // theme or base theme is eligible.
        if (!$is_eligible_theme) {
          continue;
        }
        $libraries['internal.drupal.ckeditor5.stylesheets']['css']['theme'][$path] = [];
      }
    }
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function utexas_form_elements_form_menu_link_content_form_alter(array &$form, FormStateInterface $form_state, $form_id) {
  // Modify Drupal core menu link interface to include UTexas link options.
  $form['#entity_builders']['utexas_form_elements'] = 'utexas_form_elements_menu_link_content_form_entity_builder';
  $menu_link = $form_state->getFormObject()->getEntity();
  $form['#default_value']['options'] = [];
  $link = $menu_link->link->getValue();
  if (isset($link)) {
    $form['#default_value']['options'] = $link[0]['options'];
  }
  if ($menu_link->isDefaultTranslationAffectedOnly() && !$menu_link->isDefaultTranslation()) {
    return;
  }
  // Add link options form element.
  $link_options_helper = new UtexasLinkOptionsHelper();
  $form = $link_options_helper->addLinkOptions($form);
}

/**
 * Implements entity_builder API (#2856660).
 */
function utexas_form_elements_menu_link_content_form_entity_builder($entity_type, $menu_link, &$form, &$form_state) {
  if (!$menu_link->link || $menu_link->link->isEmpty()) {
    return;
  }

  if ($menu_link->isDefaultTranslation() || !$menu_link->isDefaultTranslationAffectedOnly()) {
    $target = $form_state->getValue('target');
    $class = $form_state->getValue('class');
    $menu_link_options = [
      'attributes' => [],
    ];
    if (!empty($target)) {
      $menu_link_options['attributes']['target'] = $target;
    }
    if (!empty($class)) {
      $menu_link_options['attributes']['class'] = $class;
    }
  }
  else {
    $original = \Drupal::entityTypeManager()->getStorage($menu_link->getEntityTypeId());
    /** @var \Drupal\Core\Entity\RevisionableStorageInterface $original */
    $original->loadRevision($menu_link->getLoadedRevisionId());
    $menu_link_options = $original->get('link')->first()->options;
  }
  $menu_link->link->first()->options = $menu_link_options;
  // Multilingual: set for other languages.
  if ($menu_link->isDefaultTranslation() || !$menu_link->isDefaultTranslationAffectedOnly()) {
    foreach ($menu_link->getTranslationLanguages() as $language) {
      if ($language->getId() != $menu_link->language()->getId()) {
        $menu_link->getTranslation($language->getId())->link->first()->options = $menu_link_options;
      }
    }
  }
}

/**
 * Implements template_preprocess_menu().
 */
function utexas_form_elements_preprocess_menu(&$variables) {
  // Call recursive function to handle nested menu links.
  _utexas_form_elements_preprocess_menu_items($variables['items']);
}

/**
 * Helper function to recursively set link item attributes.
 */
function _utexas_form_elements_preprocess_menu_items(&$items) {
  foreach ($items as $item) {
    /** @var \Drupal\Core\Menu\MenuLinkInterface $menu_link */
    $menu_link = $item['original_link'] ?? NULL;
    if (!empty($menu_link)) {
      $options = ($menu_link instanceof MenuLinkContentInterface) ?
        $menu_link->link->first()->options : $menu_link->getOptions();
      // Put attributes on link element.
      if (isset($options) && isset($options['attributes'])) {
        foreach ($options['attributes'] as $attribute => $value) {
          $item['attributes']->setAttribute($attribute, $value);
        }
      }
    }
    if (!empty($item['below'])) {
      _utexas_form_elements_preprocess_menu_items($item['below']);
    }
  }
}

/**
 * Implements hook_block_alter().
 */
function utexas_form_elements_block_alter(&$definitions) {
  // Alter the "AddToAny" labels (#1867).
  foreach (array_keys($definitions) as $id) {
    if ($id === 'addtoany_block') {
      $definitions[$id]['admin_label'] = 'Share this content';
    }
    if ($id === 'addtoany_follow_block') {
      $definitions[$id]['admin_label'] = 'Follow us';
    }
  }
}

/**
 * Implements hook_form_FORMTPYE_alter().
 */
function utexas_form_elements_form_search_block_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $form['keys']['#attributes']['placeholder'] = 'Search the site...';
  $form['actions']['#attributes']['id'] = 'edit-search-actions';
}

/**
 * Implements hook_form_FORMTPYE_alter().
 */
function utexas_form_elements_form_user_login_form_alter(&$form, &$form_state, $form_id) {
  $form['actions']['submit']['#attributes']['class'][] = 'ut-btn';
}
